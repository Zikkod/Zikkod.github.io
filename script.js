// –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å —Å–∏—Å—Ç–µ–º–æ–π –≤–æ–¥—ã
const state = {
    balance: 0,
    farmToken: 0,
    farmTicket: 0,
    water: {
        current: 30,
        max: 30,
        recoveryRate: 1,
        lastRecovery: Date.now()
    },
    slots: Array(5).fill().map((_, i) => ({
        id: i + 1,
        plant: null,
        timer: null,
        plantedAt: null,
        level: 1
    })),
    inventory: {
        green_seeds: 3,
        gold_seeds: 0,
        green_fruits: 0,
        gold_fruits: 0,
        fertilizer: 0,
        water_bottle: 0,
        growth_accelerator: 0
    },
    selectedSeed: 'green',
    activeScreen: 'main',
    stats: {
        plantsPlanted: 0,
        harvestsCollected: 0,
        waterUsed: 0,
        tonEarned: 0
    },
    adViews: 0,
    premium: false,
    marketHistory: [],
    dumpLevel: 1,
    dumpResources: [
        { key: 'green_seeds', name: '–ó–µ–ª–µ–Ω—ã–µ —Å–µ–º–µ–Ω–∞', value: 1 },
        { key: 'gold_seeds', name: '–ó–æ–ª–æ—Ç—ã–µ —Å–µ–º–µ–Ω–∞', value: 2 },
        { key: 'green_fruits', name: '–ó–µ–ª–µ–Ω—ã–µ –ø–ª–æ–¥—ã', value: 3 },
        { key: 'gold_fruits', name: '–ó–æ–ª–æ—Ç—ã–µ –ø–ª–æ–¥—ã', value: 5 },
        { key: 'fertilizer', name: '–£–¥–æ–±—Ä–µ–Ω–∏–µ', value: 4 },
        { key: 'water_bottle', name: '–ë—É—Ç—ã–ª—å –≤–æ–¥—ã', value: 6 },
        { key: 'growth_accelerator', name: '–£—Å–∫–æ—Ä–∏—Ç–µ–ª—å —Ä–æ—Å—Ç–∞', value: 7 }
    ],
    craftRecipes: [
        {
            name: "–£–¥–æ–±—Ä–µ–Ω–∏–µ",
            icon: "üå±",
            output: "fertilizer",
            quantity: 1,
            ingredients: [
                { key: "green_fruits", quantity: 3 },
                { key: "green_seeds", quantity: 2 }
            ]
        },
        {
            name: "–ë—É—Ç—ã–ª—å –≤–æ–¥—ã",
            icon: "üíß",
            output: "water_bottle",
            quantity: 1,
            ingredients: [
                { key: "green_fruits", quantity: 5 },
                { key: "green_seeds", quantity: 1 }
            ]
        },
        {
            name: "–£—Å–∫–æ—Ä–∏—Ç–µ–ª—å —Ä–æ—Å—Ç–∞",
            icon: "‚ö°",
            output: "growth_accelerator",
            quantity: 1,
            ingredients: [
                { key: "gold_fruits", quantity: 2 },
                { key: "water_bottle", quantity: 1 }
            ]
        }
    ],
    merchantOffers: {
        buy: [
            { item: "green_seeds", price: 0.5, quantity: 10 },
            { item: "green_fruits", price: 1.0, quantity: 5 },
            { item: "fertilizer", price: 2.0, quantity: 2 }
        ],
        sell: [
            { item: "gold_seeds", price: 5.0, quantity: 1 },
            { item: "gold_fruits", price: 3.0, quantity: 1 },
            { item: "growth_accelerator", price: 10.0, quantity: 1 }
        ]
    },
    workers: [
        {
            id: 1,
            status: "free",
            slotId: 1,
            seedType: "green",
            endTime: null
        }
    ]
};

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ä–∞—Å—Ç–µ–Ω–∏–π
const PLANTS = {
    green: {
        name: "–ó–µ–ª–µ–Ω–æ–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ",
        emoji: "üå±",
        waterCost: 1,
        growthTime: 180, // 3 –º–∏–Ω—É—Ç—ã
        harvest: function() {
            if (Math.random() < 0.7) {
                // 70%: 1-3 —Å–≤–æ–∏—Ö —Å–µ–º—è–Ω + 0-1 –ó–µ–ª–µ–Ω—ã–π –ø–ª–æ–¥
                const seeds = Math.floor(Math.random() * 3) + 1;
                const fruit = Math.random() < 0.5 ? 1 : 0;
                return { green_seeds: seeds, green_fruits: fruit };
            } else {
                // 30%: –º—É—Ç–∞—Ü–∏—è –≤ –∑–æ–ª–æ—Ç–æ–µ —Å–µ–º—è
                return { gold_seeds: 1 };
            }
        }
    },
    gold: {
        name: "–ó–æ–ª–æ—Ç–æ–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ",
        emoji: "üåü",
        waterCost: 5,
        growthTime: 300, // 5 –º–∏–Ω—É—Ç
        harvest: function() {
            if (Math.random() < 0.7) {
                // 70%: –∑–æ–ª–æ—Ç–æ–π –ø–ª–æ–¥
                return { gold_fruits: 1 };
            } else {
                // 30%: 1-2 –∑–µ–ª–µ–Ω—ã—Ö —Å–µ–º–µ–Ω–∏
                const seeds = Math.floor(Math.random() * 2) + 1;
                return { green_seeds: seeds };
            }
        }
    }
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
document.addEventListener('DOMContentLoaded', () => {
    initGame();
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã
function initGame() {
    renderField();
    updateWater();
    updateBalance();
    updateInventory();
    updateFarmTicket();
    updateStats();
    updateDumpScreen();
    updateCraftScreen();
    updateMerchantScreen();
    updateWorkersScreen();
    setupEventListeners();
    startGrowthTimer();
    startWaterRecovery();
    startWorkerTimer();
    syncFixedPanel(); // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–∞–Ω–µ–ª–∏
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
function showNotification(message, isError = false) {
    const notificationsContainer = document.getElementById('notifications-container');
    const notification = document.createElement('div');
    notification.className = `notification ${isError ? 'error' : ''}`;
    notification.textContent = message;
    notificationsContainer.appendChild(notification);
    // –£–¥–∞–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ –∞–Ω–∏–º–∞—Ü–∏–∏
    setTimeout(() => {
        notification.remove();
    }, 3000);
}

// –†–µ–Ω–¥–µ—Ä –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è
function renderField() {
    const fieldContainer = document.getElementById('field-container');
    fieldContainer.innerHTML = '';
    state.slots.forEach(slot => {
        const slotElement = document.createElement('div');
        slotElement.className = 'slot';
        slotElement.dataset.id = slot.id;
        if (slot.plant) {
            slotElement.classList.add('occupied');
            const plant = PLANTS[slot.plant];
            // –†–∞—Å—á–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Ä–æ—Å—Ç–∞
            const progress = calculateGrowthProgress(slot);
            const isReady = progress >= 100;
            if (isReady) slotElement.classList.add('ready');
            slotElement.innerHTML = `
                <div class="plant">${plant.emoji}</div>
                <div class="plant-level">${slot.level}</div>
                ${!isReady ? `<div class="timer">${formatTime(slot.timer)}</div>` : ''}
            `;
        } else {
            slotElement.innerHTML = '<div>+</div>';
        }
        slotElement.addEventListener('click', () => handleSlotClick(slot.id));
        fieldContainer.appendChild(slotElement);
    });
}

// –†–∞—Å—á–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Ä–æ—Å—Ç–∞
function calculateGrowthProgress(slot) {
    if (!slot.plant || !slot.plantedAt) return 0;
    const plant = PLANTS[slot.plant];
    const elapsed = Date.now() - slot.plantedAt;
    const progress = Math.min(100, (elapsed / (plant.growthTime * 1000)) * 100);
    return progress;
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
function formatTime(seconds) {
    if (!seconds) return '0:00';
    const mins = Math.floor(seconds / 60);
    const secs = seconds % 60;
    return `${mins}:${secs < 10 ? '0' : ''}${secs}`;
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤–æ–¥—ã
function updateWater() {
    const waterFill = document.getElementById('water-fill');
    const currentWater = document.getElementById('current-water');
    const maxWater = document.getElementById('max-water');
    const waterRate = document.getElementById('water-rate');
    const percentage = (state.water.current / state.water.max) * 100;
    waterFill.style.width = `${percentage}%`;
    currentWater.textContent = state.water.current;
    maxWater.textContent = state.water.max;
    waterRate.textContent = state.water.recoveryRate;
    // –ê–Ω–∏–º–∞—Ü–∏—è –ø—Ä–∏ –Ω–µ—Ö–≤–∞—Ç–∫–µ –≤–æ–¥—ã
    if (state.water.current < 5) {
        waterFill.style.backgroundColor = '#f44336';
    } else {
        waterFill.style.backgroundColor = '#1e88e5';
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
function updateBalance() {
    document.getElementById('balance').textContent = state.balance.toFixed(2);
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∞—Ä–º-–±–∏–ª–µ—Ç–æ–≤
function updateFarmTicket() {
    document.getElementById('farm-ticket-count').textContent = state.farmTicket;
    document.getElementById('farm-ticket-count-profile').textContent = state.farmTicket;
    const airdropEstimate = (state.farmTicket * 0.01).toFixed(2);
    document.getElementById('airdrop-estimate').textContent = airdropEstimate;
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
function updateStats() {
    document.getElementById('stats-plants').textContent = state.stats.plantsPlanted;
    document.getElementById('stats-harvests').textContent = state.stats.harvestsCollected;
    document.getElementById('stats-water').textContent = state.stats.waterUsed;
    document.getElementById('stats-ton').textContent = state.stats.tonEarned.toFixed(2);
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
function updateInventory() {
    const inventoryGrid = document.getElementById('inventory-grid');
    if (!inventoryGrid) return;
    inventoryGrid.innerHTML = '';
    const resources = [
        { key: 'green_seeds', name: '–ó–µ–ª–µ–Ω—ã–µ —Å–µ–º–µ–Ω–∞', icon: 'üå±' },
        { key: 'gold_seeds', name: '–ó–æ–ª–æ—Ç—ã–µ —Å–µ–º–µ–Ω–∞', icon: 'üåü' },
        { key: 'green_fruits', name: '–ó–µ–ª–µ–Ω—ã–µ –ø–ª–æ–¥—ã', icon: 'üçè' },
        { key: 'gold_fruits', name: '–ó–æ–ª–æ—Ç—ã–µ –ø–ª–æ–¥—ã', icon: '‚≠ê' },
        { key: 'fertilizer', name: '–£–¥–æ–±—Ä–µ–Ω–∏–µ', icon: 'üåø' },
        { key: 'water_bottle', name: '–ë—É—Ç—ã–ª—å –≤–æ–¥—ã', icon: 'üíß' },
        { key: 'growth_accelerator', name: '–£—Å–∫–æ—Ä–∏—Ç–µ–ª—å —Ä–æ—Å—Ç–∞', icon: '‚ö°' }
    ];
    resources.forEach(resource => {
        const count = state.inventory[resource.key] || 0;
        const itemElement = document.createElement('div');
        itemElement.className = 'inventory-item';
        itemElement.innerHTML = `
            <div class="item-icon">${resource.icon}</div>
            <div class="item-name">${resource.name}</div>
            <div class="item-count">${count}</div>
        `;
        inventoryGrid.appendChild(itemElement);
    });
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞
function updateMarketHistory() {
    const historyContainer = document.getElementById('market-history');
    if (!historyContainer) return;
    historyContainer.innerHTML = '';
    state.marketHistory.slice(-5).forEach(transaction => {
        const transactionEl = document.createElement('div');
        transactionEl.className = 'transaction';
        transactionEl.innerHTML = `
            <div class="tx-icon">${transaction.type === 'sell' ? '‚≠ê' : 'üõí'}</div>
            <div class="tx-info">
                <div>${transaction.description}</div>
                <div class="tx-date">${formatDate(transaction.date)}</div>
            </div>
            <div class="tx-amount ${transaction.amount > 0 ? 'success' : 'danger'}">
                ${transaction.amount > 0 ? '+' : ''}${transaction.amount.toFixed(2)} TON
            </div>
        `;
        historyContainer.appendChild(transactionEl);
    });
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
function formatDate(date) {
    return new Date(date).toLocaleTimeString();
}

// –ü–æ—Å–∞–¥–∫–∞ —Ä–∞—Å—Ç–µ–Ω–∏—è
function plantSeed(slotId) {
    const slot = state.slots.find(s => s.id === slotId);
    if (!slot) return;
    // –ü—Ä–æ–≤–µ—Ä–∫–∞, —Å–≤–æ–±–æ–¥–µ–Ω –ª–∏ —Å–ª–æ—Ç
    if (slot.plant) {
        showNotification('–°–ª–æ—Ç —É–∂–µ –∑–∞–Ω—è—Ç!', true);
        return;
    }
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –≤–æ–¥—ã
    const plantType = state.selectedSeed;
    const waterCost = PLANTS[plantType].waterCost;
    if (state.water.current < waterCost) {
        showNotification(`–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤–æ–¥—ã! –¢—Ä–µ–±—É–µ—Ç—Å—è: ${waterCost}`, true);
        return;
    }
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Å–µ–º—è–Ω
    const seedType = `${plantType}_seeds`;
    if (state.inventory[seedType] <= 0) {
        showNotification('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–µ–º—è–Ω!', true);
        return;
    }
    // –ü–æ—Å–∞–¥–∫–∞ —Ä–∞—Å—Ç–µ–Ω–∏—è
    slot.plant = plantType;
    slot.plantedAt = Date.now();
    slot.timer = PLANTS[plantType].growthTime;
    // –†–∞—Å—Ö–æ–¥ —Ä–µ—Å—É—Ä—Å–æ–≤
    state.inventory[seedType]--;
    state.water.current -= waterCost;
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    state.stats.plantsPlanted++;
    state.stats.waterUsed += waterCost;
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI
    renderField();
    updateWater();
    updateInventory();
    updateStats();
    showNotification(`–ü–æ—Å–∞–∂–µ–Ω–æ ${PLANTS[plantType].name}!`);
    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–∞–π–º–µ—Ä–∞ –¥–ª—è —Ä–æ—Å—Ç–∞
    setTimeout(() => {
        slot.timer = 0;
        renderField();
        showNotification(`–†–∞—Å—Ç–µ–Ω–∏–µ —Å–æ–∑—Ä–µ–ª–æ!`);
    }, PLANTS[plantType].growthTime * 1000);
}

// –ü–æ—Å–∞–¥–∫–∞ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ–º—è–Ω
function plantAllSeeds() {
    const plantType = state.selectedSeed;
    const seedType = `${plantType}_seeds`;
    const waterCost = PLANTS[plantType].waterCost;
    if (state.inventory[seedType] <= 0) {
        showNotification('–ù–µ—Ç —Å–µ–º—è–Ω –¥–ª—è –ø–æ—Å–∞–¥–∫–∏!', true);
        return;
    }
    let planted = 0;
    state.slots.forEach(slot => {
        if (!slot.plant && state.inventory[seedType] > 0 && state.water.current >= waterCost) {
            // –ü–æ—Å–∞–¥–∫–∞ —Ä–∞—Å—Ç–µ–Ω–∏—è
            slot.plant = plantType;
            slot.plantedAt = Date.now();
            slot.timer = PLANTS[plantType].growthTime;
            // –†–∞—Å—Ö–æ–¥ —Ä–µ—Å—É—Ä—Å–æ–≤
            state.inventory[seedType]--;
            state.water.current -= waterCost;
            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            state.stats.plantsPlanted++;
            state.stats.waterUsed += waterCost;
            planted++;
            // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–∞–π–º–µ—Ä–∞ –¥–ª—è —Ä–æ—Å—Ç–∞
            setTimeout(() => {
                slot.timer = 0;
                renderField();
                showNotification(`–†–∞—Å—Ç–µ–Ω–∏–µ —Å–æ–∑—Ä–µ–ª–æ!`);
            }, PLANTS[plantType].growthTime * 1000);
        }
    });
    if (planted > 0) {
        renderField();
        updateWater();
        updateInventory();
        updateStats();
        showNotification(`–ü–æ—Å–∞–∂–µ–Ω–æ ${planted} —Ä–∞—Å—Ç–µ–Ω–∏–π!`);
    } else {
        showNotification('–ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤–æ–¥—ã!', true);
    }
}

// –°–±–æ—Ä –≤—Å–µ—Ö —Å–æ–∑—Ä–µ–≤—à–∏—Ö —Ä–∞—Å—Ç–µ–Ω–∏–π
function harvestAll() {
    let harvested = false;
    state.slots.forEach(slot => {
        if (slot.plant && slot.timer === 0) {
            // –°–±–æ—Ä —É—Ä–æ–∂–∞—è
            const plantType = slot.plant;
            const harvestResult = PLANTS[plantType].harvest();
            // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
            Object.entries(harvestResult).forEach(([item, count]) => {
                state.inventory[item] = (state.inventory[item] || 0) + count;
            });
            // –®–∞–Ω—Å –ø–æ–ª—É—á–µ–Ω–∏—è –æ–ø—ã—Ç–∞ (1%)
            if (Math.random() < 0.01) {
                slot.level++;
            }
            // –û—á–∏—Å—Ç–∫–∞ —Å–ª–æ—Ç–∞
            slot.plant = null;
            slot.plantedAt = null;
            slot.timer = null;
            harvested = true;
            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            state.stats.harvestsCollected++;
        }
    });
    if (harvested) {
        renderField();
        updateInventory();
        updateStats();
        showNotification('–£—Ä–æ–∂–∞–π —Å–æ–±—Ä–∞–Ω!');
    } else {
        showNotification('–ù–µ—Ç —Å–æ–∑—Ä–µ–≤—à–∏—Ö —Ä–∞—Å—Ç–µ–Ω–∏–π!', true);
    }
}

// –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Ä–∞—Å—Ç–µ–Ω–∏–π
function removeAllPlants() {
    let removed = false;
    state.slots.forEach(slot => {
        if (slot.plant) {
            slot.plant = null;
            slot.plantedAt = null;
            slot.timer = null;
            removed = true;
        }
    });
    if (removed) {
        renderField();
        showNotification('–í—Å–µ —Ä–∞—Å—Ç–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω—ã!');
    } else {
        showNotification('–ù–µ—Ç —Ä–∞—Å—Ç–µ–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è!', true);
    }
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–æ–¥—ã —á–µ—Ä–µ–∑ –ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–µ–∫–ª–∞–º—ã
function addWater() {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–Ω–µ–≤–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞
    if (state.adViews >= 5) {
        showNotification('–î–æ—Å—Ç–∏–≥–Ω—É—Ç –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–∫–ª–∞–º—ã!', true);
        return;
    }
    // –ò–º–∏—Ç–∞—Ü–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–∫–ª–∞–º—ã
    showNotification('–ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–µ–∫–ª–∞–º—ã... +5 –≤–æ–¥—ã');
    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–æ–¥—ã
    state.water.current = Math.min(state.water.current + 5, state.water.max);
    state.adViews++;
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    state.stats.waterUsed += 5;
    updateWater();
    updateStats();
}

// –ü–æ–∫—É–ø–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å–ª–æ—Ç–∞
function buySlot() {
    const slotCost = 10;
    if (state.balance < slotCost) {
        showNotification(`–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ TON! –¢—Ä–µ–±—É–µ—Ç—Å—è: ${slotCost}`, true);
        return;
    }
    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–ª–æ—Ç–∞
    const newSlotId = state.slots.length + 1;
    state.slots.push({
        id: newSlotId,
        plant: null,
        timer: null,
        plantedAt: null,
        level: 1
    });
    // –°–ø–∏—Å–∞–Ω–∏–µ TON
    state.balance -= slotCost;
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI
    updateBalance();
    renderField();
    showNotification(`–ö—É–ø–ª–µ–Ω –Ω–æ–≤—ã–π —Å–ª–æ—Ç –∑–∞ ${slotCost} TON!`);
}

// –ü—Ä–æ–¥–∞–∂–∞ –∑–æ–ª–æ—Ç—ã—Ö –ø–ª–æ–¥–æ–≤
function sellGoldFruits() {
    const quantity = parseInt(document.getElementById('gold-fruit-quantity').value) || 0;
    if (quantity <= 0) {
        showNotification('–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ!', true);
        return;
    }
    if (state.inventory.gold_fruits < quantity) {
        showNotification('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–æ–ª–æ—Ç—ã—Ö –ø–ª–æ–¥–æ–≤!', true);
        return;
    }
    // –†–∞—Å—á–µ—Ç –≤—ã—Ä—É—á–∫–∏ —Å —É—á–µ—Ç–æ–º –∫–æ–º–∏—Å—Å–∏–∏
    const pricePerItem = 1;
    const total = pricePerItem * quantity;
    // –î–ª—è farm coin –∫–æ–º–∏—Å—Å–∏—è 10% (5% —Ä–µ—Ñ–µ—Ä–µ—Ä—É, 5% –ø—Ä–æ–µ–∫—Ç—É)
    const commission = 0.10;
    const earnings = total * (1 - commission);
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    state.inventory.gold_fruits -= quantity;
    state.balance += earnings;
    state.stats.tonEarned += earnings;
    
    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
    state.marketHistory.push({
        date: new Date(),
        type: 'sell',
        description: `–ü—Ä–æ–¥–∞–Ω–æ ${quantity} –∑–æ–ª–æ—Ç—ã—Ö –ø–ª–æ–¥–æ–≤`,
        amount: earnings
    });
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI
    updateBalance();
    updateInventory();
    updateStats();
    updateMarketHistory();
    showNotification(`–ü—Ä–æ–¥–∞–Ω–æ ${quantity} –ø–ª–æ–¥–æ–≤! –ü–æ–ª—É—á–µ–Ω–æ: ${earnings.toFixed(2)} TON`);
}

// –í–Ω–µ—Å–µ–Ω–∏–µ TON
function depositTON() {
    const amount = Math.floor(Math.random() * 20) + 10;
    state.balance += amount;
    updateBalance();
    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
    state.marketHistory.push({
        date: new Date(),
        type: 'deposit',
        description: '–í–Ω–µ—Å–µ–Ω–∏–µ TON',
        amount: amount
    });
    updateMarketHistory();
    showNotification(`–í–Ω–µ—Å–µ–Ω–æ ${amount} TON!`);
}

// –í—ã–≤–æ–¥ TON
function withdrawTON() {
    const minWithdraw = 10;
    if (state.balance < minWithdraw) {
        showNotification(`–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞: ${minWithdraw} TON`, true);
        return;
    }
    const amount = state.balance;
    // –ö–æ–º–∏—Å—Å–∏—è 5% (3% —Å–∂–∏–≥–∞–µ—Ç—Å—è, 2% –ø—Ä–æ–µ–∫—Ç—É)
    const commission = 0.05;
    const withdrawAmount = amount * (1 - commission);
    const burnedAmount = amount * commission;
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    state.balance = 0;
    state.farmToken -= burnedAmount; // –°–∂–∏–≥–∞–µ–º —á–∞—Å—Ç—å —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –∫–æ–º–∏—Å—Å–∏–∏
    
    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
    state.marketHistory.push({
        date: new Date(),
        type: 'withdraw',
        description: `–í—ã–≤–æ–¥ TON (—Å–∂–∏–≥–∞–Ω–∏–µ ${burnedAmount.toFixed(2)} TON)`,
        amount: -withdrawAmount
    });
    
    updateBalance();
    updateMarketHistory();
    showNotification(`–í—ã–≤–µ–¥–µ–Ω–æ ${withdrawAmount.toFixed(2)} TON! –°–æ–∂–∂–µ–Ω–æ: ${burnedAmount.toFixed(2)} TON`);
}

// –ü–æ–∫—É–ø–∫–∞ –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∏
function buyPremium() {
    const cost = 10;
    if (state.premium) {
        showNotification('–ü–æ–¥–ø–∏—Å–∫–∞ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞!');
        return;
    }
    if (state.balance < cost) {
        showNotification(`–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ TON! –¢—Ä–µ–±—É–µ—Ç—Å—è: ${cost}`, true);
        return;
    }
    // –ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
    state.premium = true;
    state.balance -= cost;
    // –≠—Ñ—Ñ–µ–∫—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∏
    state.water.max = Math.floor(state.water.max * 1.5);
    state.water.recoveryRate = state.water.recoveryRate * 2;
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI
    updateBalance();
    updateWater();
    document.querySelector('.subscription-status span').innerHTML =
        '–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: <strong style="color: var(--premium);">–ü–ª–æ–¥–æ—Ä–æ–¥–Ω—ã–π —Å–µ–∑–æ–Ω</strong>';
    showNotification('–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞ "–ü–ª–æ–¥–æ—Ä–æ–¥–Ω—ã–π —Å–µ–∑–æ–Ω"!');
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ —Å–ª–æ—Ç—É
function handleSlotClick(slotId) {
    const slot = state.slots.find(s => s.id === slotId);
    if (!slot) return;
    if (!slot.plant) {
        // –ï—Å–ª–∏ —Å–ª–æ—Ç –ø—É—Å—Ç–æ–π - –ø–æ–ø—ã—Ç–∫–∞ –ø–æ—Å–∞–¥–∫–∏
        plantSeed(slotId);
    } else if (slot.timer === 0) {
        // –ï—Å–ª–∏ —Ä–∞—Å—Ç–µ–Ω–∏–µ —Å–æ–∑—Ä–µ–ª–æ - —Å–±–æ—Ä —É—Ä–æ–∂–∞—è
        harvestSlot(slotId);
    } else {
        // –ï—Å–ª–∏ —Ä–∞—Å—Ç–µ–Ω–∏–µ —Ä–∞—Å—Ç–µ—Ç - —É—Å–∫–æ—Ä–µ–Ω–∏–µ –∑–∞ —Ä–µ–∫–ª–∞–º—É
        if (confirm("–£—Å–∫–æ—Ä–∏—Ç—å —Ä–æ—Å—Ç –∑–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–µ–∫–ª–∞–º—ã?")) {
            watchAdForSpeedup(slotId);
        }
    }
}

// –°–±–æ—Ä —É—Ä–æ–∂–∞—è —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–ª–æ—Ç–∞
function harvestSlot(slotId) {
    const slot = state.slots.find(s => s.id === slotId);
    if (!slot || !slot.plant || slot.timer !== 0) return;
    // –°–±–æ—Ä —É—Ä–æ–∂–∞—è
    const plantType = slot.plant;
    const harvestResult = PLANTS[plantType].harvest();
    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
    Object.entries(harvestResult).forEach(([item, count]) => {
        state.inventory[item] = (state.inventory[item] || 0) + count;
    });
    // –®–∞–Ω—Å –ø–æ–ª—É—á–µ–Ω–∏—è –æ–ø—ã—Ç–∞ (1%)
    if (Math.random() < 0.01) {
        slot.level++;
    }
    // –û—á–∏—Å—Ç–∫–∞ —Å–ª–æ—Ç–∞
    slot.plant = null;
    slot.plantedAt = null;
    slot.timer = null;
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    state.stats.harvestsCollected++;
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI
    renderField();
    updateInventory();
    updateStats();
    showNotification('–£—Ä–æ–∂–∞–π —Å–æ–±—Ä–∞–Ω!');
}

// –£—Å–∫–æ—Ä–µ–Ω–∏–µ —Ä–æ—Å—Ç–∞ –∑–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–µ–∫–ª–∞–º—ã
function watchAdForSpeedup(slotId) {
    const slot = state.slots.find(s => s.id === slotId);
    if (!slot || !slot.plant || slot.timer === 0) return;
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
    if (state.adViews >= 5) {
        showNotification('–î–æ—Å—Ç–∏–≥–Ω—É—Ç –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–∫–ª–∞–º—ã!', true);
        return;
    }
    // –ò–º–∏—Ç–∞—Ü–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–∫–ª–∞–º—ã
    showNotification('–ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–µ–∫–ª–∞–º—ã... —É—Å–∫–æ—Ä–µ–Ω–∏–µ —Ä–æ—Å—Ç–∞');
    // –£—Å–∫–æ—Ä–µ–Ω–∏–µ —Ä–æ—Å—Ç–∞ (—É–º–µ–Ω—å—à–∞–µ–º –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è –Ω–∞ 90%)
    const remainingTime = slot.timer * 1000 - (Date.now() - slot.plantedAt);
    slot.plantedAt = Date.now() - (PLANTS[slot.plant].growthTime * 1000 - remainingTime * 0.1);
    state.adViews++;
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI
    renderField();
}

// –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–æ–¥—ã —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º
function startWaterRecovery() {
    setInterval(() => {
        const now = Date.now();
        const elapsedMinutes = (now - state.water.lastRecovery) / (1000 * 60);
        if (elapsedMinutes >= 1) {
            const recoveryAmount = Math.floor(elapsedMinutes) * state.water.recoveryRate;
            const oldWater = state.water.current;
            state.water.current = Math.min(
                state.water.current + recoveryAmount,
                state.water.max
            );
            state.water.lastRecovery = now;
            // –ï—Å–ª–∏ –≤–æ–¥–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª–∞—Å—å
            if (oldWater < state.water.max && state.water.current === state.water.max) {
                showNotification('–í–æ–¥–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!');
            }
            updateWater();
        }
    }, 30000); // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
}

// –¢–∞–π–º–µ—Ä —Ä–æ—Å—Ç–∞ —Ä–∞—Å—Ç–µ–Ω–∏–π
function startGrowthTimer() {
    setInterval(() => {
        let needsUpdate = false;
        state.slots.forEach(slot => {
            if (slot.plant && slot.timer > 0) {
                // –†–∞—Å—á–µ—Ç –æ—Å—Ç–∞–≤—à–µ–≥–æ—Å—è –≤—Ä–µ–º–µ–Ω–∏
                const elapsed = (Date.now() - slot.plantedAt) / 1000;
                const remaining = Math.max(0, PLANTS[slot.plant].growthTime - elapsed);
                if (slot.timer !== Math.ceil(remaining)) {
                    slot.timer = Math.ceil(remaining);
                    needsUpdate = true;
                    // –ï—Å–ª–∏ —Ä–∞—Å—Ç–µ–Ω–∏–µ —Å–æ–∑—Ä–µ–ª–æ
                    if (slot.timer === 0) {
                        showNotification(`–†–∞—Å—Ç–µ–Ω–∏–µ —Å–æ–∑—Ä–µ–ª–æ!`);
                    }
                }
            }
        });
        if (needsUpdate) {
            renderField();
        }
    }, 1000);
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —ç–∫—Ä–∞–Ω–∞ –±–µ–∑–¥–æ–Ω–Ω–æ–π —è–º—ã
function updateDumpScreen() {
    const dumpResourcesGrid = document.getElementById('dump-resources-grid');
    dumpResourcesGrid.innerHTML = '';
    
    state.dumpResources.forEach(resource => {
        const count = state.inventory[resource.key] || 0;
        if (count > 0) {
            const resourceElement = document.createElement('div');
            resourceElement.className = 'dump-resource';
            resourceElement.innerHTML = `
                <div class="item-icon">${resource.icon || 'üå±'}</div>
                <div class="item-name">${resource.name}</div>
                <div class="item-count">${count}</div>
            `;
            resourceElement.addEventListener('click', () => dumpResource(resource.key));
            dumpResourcesGrid.appendChild(resourceElement);
        }
    });
}

// –°–±—Ä–æ—Å —Ä–µ—Å—É—Ä—Å–æ–≤ –≤ –±–µ–∑–¥–æ–Ω–Ω—É—é —è–º—É
function dumpResource(resourceKey) {
    const resource = state.dumpResources.find(r => r.key === resourceKey);
    if (!resource || state.inventory[resourceKey] <= 0) return;
    
    // –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Å—É—Ä—Å–∞
    state.inventory[resourceKey]--;
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥—Ä–æ–ø
    const tier = calculateDumpTier();
    const drop = generateDrop(tier);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –¥—Ä–æ–ø –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
    if (drop) {
        state.inventory[drop.key] = (state.inventory[drop.key] || 0) + drop.quantity;
        showNotification(`–ü–æ–ª—É—á–µ–Ω–æ: ${drop.quantity} ${drop.name}`);
    } else {
        showNotification('–°–æ–∂–∂–µ–Ω–æ! –ù–∏—á–µ–≥–æ –Ω–µ –ø–æ–ª—É—á–µ–Ω–æ.');
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º UI
    updateDumpScreen();
    updateInventory();
}

// –†–∞—Å—á–µ—Ç —É—Ä–æ–≤–Ω—è —è–º—ã
function calculateDumpTier() {
    const baseTier = state.dumpLevel;
    return Math.min(5, baseTier);
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥—Ä–æ–ø–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Ä–æ–≤–Ω—è —è–º—ã
function generateDrop(tier) {
    const drops = [
        { key: 'green_seeds', name: '–ó–µ–ª–µ–Ω—ã–µ —Å–µ–º–µ–Ω–∞', quantity: 1, chance: 0.7 },
        { key: 'gold_seeds', name: '–ó–æ–ª–æ—Ç—ã–µ —Å–µ–º–µ–Ω–∞', quantity: 1, chance: 0.3 },
        { key: 'green_fruits', name: '–ó–µ–ª–µ–Ω—ã–µ –ø–ª–æ–¥—ã', quantity: 1, chance: 0.5 },
        { key: 'gold_fruits', name: '–ó–æ–ª–æ—Ç—ã–µ –ø–ª–æ–¥—ã', quantity: 1, chance: 0.2 },
        { key: 'fertilizer', name: '–£–¥–æ–±—Ä–µ–Ω–∏–µ', quantity: 1, chance: 0.4 },
        { key: 'water_bottle', name: '–ë—É—Ç—ã–ª—å –≤–æ–¥—ã', quantity: 1, chance: 0.3 },
        { key: 'growth_accelerator', name: '–£—Å–∫–æ—Ä–∏—Ç–µ–ª—å —Ä–æ—Å—Ç–∞', quantity: 1, chance: 0.1 },
        { key: 'farm_ticket', name: '–§–∞—Ä–º-–±–∏–ª–µ—Ç', quantity: 1, chance: 0.05 }
    ];
    
    // –§–∏–ª—å—Ç—Ä—É–µ–º –¥—Ä–æ–ø—ã –ø–æ —É—Ä–æ–≤–Ω—é —è–º—ã
    const filteredDrops = drops.filter(drop => {
        if (tier === 1) return drop.chance >= 0.1;
        if (tier === 2) return drop.chance >= 0.05;
        if (tier === 3) return drop.chance >= 0.03;
        if (tier === 4) return drop.chance >= 0.02;
        return drop.chance >= 0.01;
    });
    
    if (filteredDrops.length === 0) return null;
    
    // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –¥—Ä–æ–ø
    const randomIndex = Math.floor(Math.random() * filteredDrops.length);
    return filteredDrops[randomIndex];
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —ç–∫—Ä–∞–Ω–∞ –∫—Ä–∞—Ñ—Ç–∞
function updateCraftScreen() {
    const craftGrid = document.getElementById('craft-grid');
    craftGrid.innerHTML = '';
    
    const activeTab = document.querySelector('.tab-btn.active').dataset.craftType;
    const recipes = state.craftRecipes.filter(recipe => {
        if (activeTab === 'all') return true;
        if (activeTab === 'available') {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –∏–≥—Ä–æ–∫–∞ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ä–µ—Å—É—Ä—Å—ã –¥–ª—è –∫—Ä–∞—Ñ—Ç–∞
            return recipe.ingredients.every(ing => {
                return state.inventory[ing.key] >= ing.quantity;
            });
        }
        return true;
    });
    
    recipes.forEach(recipe => {
        const recipeElement = document.createElement('div');
        recipeElement.className = 'craft-item';
        recipeElement.innerHTML = `
            <div class="craft-item-icon">${recipe.icon}</div>
            <div class="craft-item-name">${recipe.name}</div>
            <div class="craft-item-recipe">
                ${recipe.ingredients.map(ing => `
                    <div class="craft-ingredient">
                        <span>${ing.quantity}</span>
                        <span>${getIngredientName(ing.key)}</span>
                    </div>
                `).join('')}
            </div>
            <button class="btn primary" data-craft="${recipe.output}">–°–æ–∑–¥–∞—Ç—å</button>
        `;
        recipeElement.querySelector('button').addEventListener('click', () => craftItem(recipe));
        craftGrid.appendChild(recipeElement);
    });
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞
function getIngredientName(key) {
    const resources = [
        { key: 'green_seeds', name: '–ó–µ–ª–µ–Ω—ã–µ —Å–µ–º–µ–Ω–∞' },
        { key: 'gold_seeds', name: '–ó–æ–ª–æ—Ç—ã–µ —Å–µ–º–µ–Ω–∞' },
        { key: 'green_fruits', name: '–ó–µ–ª–µ–Ω—ã–µ –ø–ª–æ–¥—ã' },
        { key: 'gold_fruits', name: '–ó–æ–ª–æ—Ç—ã–µ –ø–ª–æ–¥—ã' },
        { key: 'fertilizer', name: '–£–¥–æ–±—Ä–µ–Ω–∏–µ' },
        { key: 'water_bottle', name: '–ë—É—Ç—ã–ª—å –≤–æ–¥—ã' },
        { key: 'growth_accelerator', name: '–£—Å–∫–æ—Ä–∏—Ç–µ–ª—å —Ä–æ—Å—Ç–∞' }
    ];
    
    const resource = resources.find(r => r.key === key);
    return resource ? resource.name : key;
}

// –ö—Ä–∞—Ñ—Ç –ø—Ä–µ–¥–º–µ—Ç–∞
function craftItem(recipe) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö —Ä–µ—Å—É—Ä—Å–æ–≤
    if (!recipe.ingredients.every(ing => {
        return state.inventory[ing.key] >= ing.quantity;
    })) {
        showNotification('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–µ—Å—É—Ä—Å–æ–≤ –¥–ª—è –∫—Ä–∞—Ñ—Ç–∞!', true);
        return;
    }
    
    // –£–º–µ–Ω—å—à–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã
    recipe.ingredients.forEach(ing => {
        state.inventory[ing.key] -= ing.quantity;
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫—Ä–∞—Ñ—Ç–∞
    state.inventory[recipe.output] = (state.inventory[recipe.output] || 0) + recipe.quantity;
    
    showNotification(`–°–æ–∑–¥–∞–Ω–æ: ${recipe.quantity} ${recipe.name}`);
    updateCraftScreen();
    updateInventory();
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —ç–∫—Ä–∞–Ω–∞ —Å—Ç—Ä–∞–Ω—Å—Ç–≤—É—é—â–µ–≥–æ —Ç–æ—Ä–≥–æ–≤—Ü–∞
function updateMerchantScreen() {
    const merchantBuyGrid = document.getElementById('merchant-buy-grid');
    const merchantSellGrid = document.getElementById('merchant-sell-grid');
    
    merchantBuyGrid.innerHTML = '';
    merchantSellGrid.innerHTML = '';
    
    // –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –ø–æ–∫—É–ø–∫–∏
    state.merchantOffers.buy.forEach(offer => {
        const offerElement = document.createElement('div');
        offerElement.className = 'merchant-offer';
        offerElement.innerHTML = `
            <div class="merchant-offer-icon">${getIconForItem(offer.item)}</div>
            <div class="merchant-offer-name">${getDisplayName(offer.item)}</div>
            <div class="merchant-offer-price">–¶–µ–Ω–∞: ${offer.price} TON</div>
            <button class="btn primary" data-item="${offer.item}" data-quantity="${offer.quantity}" data-type="buy">–ö—É–ø–∏—Ç—å</button>
        `;
        offerElement.querySelector('button').addEventListener('click', () => buyFromMerchant(offer));
        merchantBuyGrid.appendChild(offerElement);
    });
    
    // –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏
    state.merchantOffers.sell.forEach(offer => {
        const offerElement = document.createElement('div');
        offerElement.className = 'merchant-offer';
        offerElement.innerHTML = `
            <div class="merchant-offer-icon">${getIconForItem(offer.item)}</div>
            <div class="merchant-offer-name">${getDisplayName(offer.item)}</div>
            <div class="merchant-offer-price">–¶–µ–Ω–∞: ${offer.price} TON</div>
            <button class="btn primary" data-item="${offer.item}" data-quantity="${offer.quantity}" data-type="sell">–ü—Ä–æ–¥–∞—Ç—å</button>
        `;
        offerElement.querySelector('button').addEventListener('click', () => sellToMerchant(offer));
        merchantSellGrid.appendChild(offerElement);
    });
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–∞
function getIconForItem(item) {
    const icons = {
        'green_seeds': 'üå±',
        'gold_seeds': 'üåü',
        'green_fruits': 'üçè',
        'gold_fruits': '‚≠ê',
        'fertilizer': 'üåø',
        'water_bottle': 'üíß',
        'growth_accelerator': '‚ö°'
    };
    return icons[item] || 'üå±';
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–∞
function getDisplayName(item) {
    const names = {
        'green_seeds': '–ó–µ–ª–µ–Ω—ã–µ —Å–µ–º–µ–Ω–∞',
        'gold_seeds': '–ó–æ–ª–æ—Ç—ã–µ —Å–µ–º–µ–Ω–∞',
        'green_fruits': '–ó–µ–ª–µ–Ω—ã–µ –ø–ª–æ–¥—ã',
        'gold_fruits': '–ó–æ–ª–æ—Ç—ã–µ –ø–ª–æ–¥—ã',
        'fertilizer': '–£–¥–æ–±—Ä–µ–Ω–∏–µ',
        'water_bottle': '–ë—É—Ç—ã–ª—å –≤–æ–¥—ã',
        'growth_accelerator': '–£—Å–∫–æ—Ä–∏—Ç–µ–ª—å —Ä–æ—Å—Ç–∞'
    };
    return names[item] || item;
}

// –ü–æ–∫—É–ø–∫–∞ —É —Ç–æ—Ä–≥–æ–≤—Ü–∞
function buyFromMerchant(offer) {
    const cost = offer.price * offer.quantity;
    if (state.balance < cost) {
        showNotification('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ TON –¥–ª—è –ø–æ–∫—É–ø–∫–∏!', true);
        return;
    }
    
    // –ü–æ–∫—É–ø–∫–∞
    state.balance -= cost;
    state.inventory[offer.item] = (state.inventory[offer.item] || 0) + offer.quantity;
    
    showNotification(`–ö—É–ø–ª–µ–Ω–æ: ${offer.quantity} ${getDisplayName(offer.item)} –∑–∞ ${cost} TON`);
    updateMerchantScreen();
    updateBalance();
    updateInventory();
}

// –ü—Ä–æ–¥–∞–∂–∞ —Ç–æ—Ä–≥–æ–≤—Ü—É
function sellToMerchant(offer) {
    if (state.inventory[offer.item] < offer.quantity) {
        showNotification('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏!', true);
        return;
    }
    
    // –ü—Ä–æ–¥–∞–∂–∞
    const earnings = offer.price * offer.quantity;
    state.balance += earnings;
    state.inventory[offer.item] -= offer.quantity;
    
    showNotification(`–ü—Ä–æ–¥–∞–Ω–æ: ${offer.quantity} ${getDisplayName(offer.item)} –∑–∞ ${earnings} TON`);
    updateMerchantScreen();
    updateBalance();
    updateInventory();
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —ç–∫—Ä–∞–Ω–∞ —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤
function updateWorkersScreen() {
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å—ã —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤
    state.workers.forEach(worker => {
        const statusElement = document.getElementById(`worker-status-${worker.id}`);
        const timeElement = document.getElementById(`worker-time-${worker.id}`);
        
        if (worker.status === 'working') {
            const remainingTime = worker.endTime - Date.now();
            if (remainingTime <= 0) {
                worker.status = 'free';
                worker.endTime = null;
                statusElement.textContent = '–°–≤–æ–±–æ–¥–µ–Ω';
                timeElement.textContent = '–î–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è: 00:00:00';
            } else {
                statusElement.textContent = '–†–∞–±–æ—Ç–∞–µ—Ç';
                timeElement.textContent = `–î–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è: ${formatTimeRemaining(remainingTime)}`;
            }
        } else {
            statusElement.textContent = '–°–≤–æ–±–æ–¥–µ–Ω';
            timeElement.textContent = '–î–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è: 00:00:00';
        }
    });
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã
    const slotSelect = document.getElementById('worker-slot-select');
    slotSelect.innerHTML = '';
    state.slots.forEach(slot => {
        const option = document.createElement('option');
        option.value = slot.id;
        option.textContent = `–°–ª–æ—Ç ${slot.id}`;
        slotSelect.appendChild(option);
    });
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–≤—à–µ–≥–æ—Å—è –≤—Ä–µ–º–µ–Ω–∏
function formatTimeRemaining(ms) {
    const seconds = Math.floor(ms / 1000);
    const mins = Math.floor(seconds / 60);
    const hrs = Math.floor(mins / 60);
    const secs = seconds % 60;
    
    return `${hrs.toString().padStart(2, '0')}:${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;
}

// –ù–∞–Ω—è—Ç—å —Ä–∞–±–æ—Ç–Ω–∏–∫–∞
function hireWorker() {
    const worker = state.workers[0];
    if (worker.status !== 'free') {
        showNotification('–†–∞–±–æ—Ç–Ω–∏–∫ —É–∂–µ –∑–∞–Ω—è—Ç!', true);
        return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤ –¥–ª—è –Ω–∞–π–º–∞
    if (state.inventory.water_bottle < 1) {
        showNotification('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±—É—Ç—ã–ª–µ–π –≤–æ–¥—ã –¥–ª—è –Ω–∞–π–º–∞!', true);
        return;
    }
    
    // –ó–∞—Ç—Ä–∞—Ç—ã –Ω–∞ –Ω–∞–π–º
    state.inventory.water_bottle--;
    worker.status = 'working';
    worker.endTime = Date.now() + 8 * 60 * 60 * 1000; // 8 —á–∞—Å–æ–≤
    
    showNotification('–†–∞–±–æ—Ç–Ω–∏–∫ –Ω–∞–Ω—è—Ç –Ω–∞ 8 —á–∞—Å–æ–≤!');
    updateWorkersScreen();
}

// –£–≤–æ–ª–∏—Ç—å —Ä–∞–±–æ—Ç–Ω–∏–∫–∞
function fireWorker() {
    const worker = state.workers[0];
    if (worker.status === 'free') {
        showNotification('–†–∞–±–æ—Ç–Ω–∏–∫ —É–∂–µ —Å–≤–æ–±–æ–¥–µ–Ω!', true);
        return;
    }
    
    // –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É —Ä–∞–Ω—å—à–µ –≤—Ä–µ–º–µ–Ω–∏
    worker.status = 'free';
    worker.endTime = null;
    
    showNotification('–†–∞–±–æ—Ç–Ω–∏–∫ —É–≤–æ–ª–µ–Ω!');
    updateWorkersScreen();
}

// –°—Ç–∞—Ä—Ç —Ç–∞–π–º–µ—Ä–∞ —Ä–∞–±–æ—Ç—ã —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤
function startWorkerTimer() {
    setInterval(() => {
        updateWorkersScreen();
    }, 1000);
}

// –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –ø–∞–Ω–µ–ª–∏
function syncFixedPanel() {
    const fixedContainer = document.querySelector('.fixed-bottom-container');
    if (state.activeScreen === 'main') {
        fixedContainer.style.display = 'block';
    } else {
        fixedContainer.style.display = 'none';
    }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
function setupEventListeners() {
    // –í—ã–±–æ—Ä —Å–µ–º–µ–Ω–∏
    document.getElementById('seed-select').addEventListener('change', (e) => {
        state.selectedSeed = e.target.value;
    });
    // –ö–Ω–æ–ø–∫–∞ –ø–æ—Å–∞–¥–∫–∏
    document.getElementById('plant-btn').addEventListener('click', () => {
        const freeSlot = state.slots.find(slot => !slot.plant);
        if (freeSlot) plantSeed(freeSlot.id);
        else showNotification('–ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤!', true);
    });
    // –ö–Ω–æ–ø–∫–∞ "–ü–æ—Å–∞–¥–∏—Ç—å –≤—Å–µ"
    document.getElementById('plant-all-btn').addEventListener('click', plantAllSeeds);
    // –ö–Ω–æ–ø–∫–∞ "–°–æ–±—Ä–∞—Ç—å –≤—Å–µ"
    document.getElementById('harvest-all-btn').addEventListener('click', harvestAll);
    // –ö–Ω–æ–ø–∫–∞ "–£–¥–∞–ª–∏—Ç—å –≤—Å–µ"
    document.getElementById('remove-all-btn').addEventListener('click', removeAllPlants);
    // –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–æ–¥—ã
    document.getElementById('water-btn').addEventListener('click', addWater);
    // –ö–Ω–æ–ø–∫–∞ –ø–æ–∫—É–ø–∫–∏ —Å–ª–æ—Ç–∞
    document.getElementById('buy-slot-btn').addEventListener('click', buySlot);
    // –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ–¥–∞–∂–∏ –∑–æ–ª–æ—Ç—ã—Ö –ø–ª–æ–¥–æ–≤
    document.getElementById('sell-gold-btn').addEventListener('click', sellGoldFruits);
    // –ö–Ω–æ–ø–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è
    document.getElementById('deposit-btn').addEventListener('click', depositTON);
    document.getElementById('withdraw-btn').addEventListener('click', withdrawTON);
    document.getElementById('premium-btn').addEventListener('click', buyPremium);
    document.getElementById('copy-ref-btn').addEventListener('click', () => {
        const input = document.getElementById('referral-code');
        input.select();
        document.execCommand('copy');
        showNotification('–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω!');
    });
    // –ü–µ—Ä–µ—Ö–æ–¥ –≤ –ø—Ä–æ—Ñ–∏–ª—å –ø–æ –∫–ª–∏–∫—É –Ω–∞ –∞–≤–∞—Ç–∞—Ä
    document.getElementById('profile-btn').addEventListener('click', () => {
        showScreen('profile');
    });
    // –ù–∞–≤–∏–≥–∞—Ü–∏—è
    document.querySelectorAll('.nav-btn').forEach(btn => {
        btn.addEventListener('click', () => {
            const screen = btn.dataset.screen;
            showScreen(screen);
        });
    });
    // –í–∫–ª–∞–¥–∫–∏ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞
    document.querySelectorAll('.tab-btn').forEach(btn => {
        btn.addEventListener('click', () => {
            document.querySelectorAll('.tab-btn').forEach(b => b.classList.remove('active'));
            btn.classList.add('active');
            updateMarketHistory();
        });
    });
    // –í–∫–ª–∞–¥–∫–∏ –∫—Ä–∞—Ñ—Ç–∞
    document.querySelectorAll('.craft-tabs .tab-btn').forEach(btn => {
        btn.addEventListener('click', () => {
            document.querySelectorAll('.craft-tabs .tab-btn').forEach(b => b.classList.remove('active'));
            btn.classList.add('active');
            updateCraftScreen();
        });
    });
    // –ö–Ω–æ–ø–∫–∏ –¥–ª—è –±–µ–∑–¥–æ–Ω–Ω–æ–π —è–º—ã
    document.getElementById('upgrade-dump-btn').addEventListener('click', upgradeDump);
    // –ö–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤
    document.getElementById('hire-worker-btn').addEventListener('click', hireWorker);
    document.getElementById('fire-worker-btn').addEventListener('click', fireWorker);
    // –ö–Ω–æ–ø–∫–∏ –¥–ª—è —Ç–æ—Ä–≥–æ–≤—Ü–∞
    document.querySelectorAll('.merchant-offer button').forEach(btn => {
        btn.addEventListener('click', () => {
            const type = btn.dataset.type;
            const item = btn.dataset.item;
            const quantity = parseInt(btn.dataset.quantity);
            
            if (type === 'buy') {
                buyFromMerchant({ item, price: 1, quantity });
            } else {
                sellToMerchant({ item, price: 1, quantity });
            }
        });
    });
}

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —ç–∫—Ä–∞–Ω–æ–≤
function showScreen(screenName) {
    // –°–∫—Ä—ã—Ç—å –≤—Å–µ —ç–∫—Ä–∞–Ω—ã
    document.querySelectorAll('.screen').forEach(screen => {
        screen.classList.remove('active');
    });
    // –ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π —ç–∫—Ä–∞–Ω
    const screenElement = document.getElementById(`${screenName}-screen`);
    if (screenElement) {
        screenElement.classList.add('active');
        // –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –Ω–∞ —ç–∫—Ä–∞–Ω
        if (screenName === 'inventory') {
            updateInventory();
        } else if (screenName === 'market') {
            updateMarketHistory();
        } else if (screenName === 'profile') {
            updateStats();
            updateFarmTicket();
        } else if (screenName === 'dump') {
            updateDumpScreen();
        } else if (screenName === 'craft') {
            updateCraftScreen();
        } else if (screenName === 'merchant') {
            updateMerchantScreen();
        } else if (screenName === 'workers') {
            updateWorkersScreen();
        }
    }
    // –û–±–Ω–æ–≤–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—É—é –∫–Ω–æ–ø–∫—É –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    document.querySelectorAll('.nav-btn').forEach(btn => {
        btn.classList.toggle('active', btn.dataset.screen === screenName);
    });
    // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π —ç–∫—Ä–∞–Ω
    state.activeScreen = screenName;
    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—É—é –ø–∞–Ω–µ–ª—å
    syncFixedPanel();
}

// –£–ª—É—á—à–µ–Ω–∏–µ –±–µ–∑–¥–æ–Ω–Ω–æ–π —è–º—ã
function upgradeDump() {
    const upgradeCost = 10;
    if (state.balance < upgradeCost) {
        showNotification(`–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ TON! –¢—Ä–µ–±—É–µ—Ç—Å—è: ${upgradeCost}`, true);
        return;
    }
    
    // –£–ª—É—á—à–µ–Ω–∏–µ —è–º—ã
    state.dumpLevel++;
    state.balance -= upgradeCost;
    
    showNotification(`–£—Ä–æ–≤–µ–Ω—å –±–µ–∑–¥–æ–Ω–Ω–æ–π —è–º—ã –ø–æ–≤—ã—à–µ–Ω –¥–æ ${state.dumpLevel}!`);
    updateDumpScreen();
    updateBalance();
}