// –û–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
let gameState = {
    walletConnected: false,
    balance: 0,
    plantingSlots: 5,
    slotPrice: 10, // –¶–µ–Ω–∞ –Ω–æ–≤–æ–≥–æ —Å–ª–æ—Ç–∞ –≤ TON
    plants: [],
    inventory: {
        greenSeeds: 0,
        goldSeeds: 0,
        greenFruits: 0,
        goldFruits: 0
    }
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã
function initGame() {
    loadGameState();
    renderGame();
    setupEventListeners();
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–∑ localStorage
function loadGameState() {
    const savedState = localStorage.getItem('farmGameState');
    if (savedState) {
        gameState = JSON.parse(savedState);
    }
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤ localStorage
function saveGameState() {
    localStorage.setItem('farmGameState', JSON.stringify(gameState));
}

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞
function connectWallet() {
    if (!gameState.walletConnected) {
        gameState.walletConnected = true;
        gameState.inventory.greenSeeds += 3;

        showNotification('–ö–æ—à–µ–ª–µ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω! –ü–æ–ª—É—á–µ–Ω–æ 3 —Å–µ–º–µ–Ω–∏ –∑–µ–ª–µ–Ω–æ–≥–æ —Ä–∞—Å—Ç–µ–Ω–∏—è');
        saveGameState();
        renderGame();
    }
}

// –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
function showNotification(message, isError = false) {
    const notification = document.createElement('div');
    notification.className = `notification ${isError ? 'error' : ''}`;
    notification.textContent = message;
    document.body.appendChild(notification);

    setTimeout(() => notification.classList.add('show'), 10);

    setTimeout(() => {
        notification.classList.remove('show');
        setTimeout(() => notification.remove(), 300);
    }, 3000);
}

// –ü–æ—Å–∞–¥–∏—Ç—å —Ä–∞—Å—Ç–µ–Ω–∏–µ
function plantSeed(slotIndex, seedType) {
    if (gameState.plants[slotIndex]) return;

    if (seedType === 'green' && gameState.inventory.greenSeeds > 0) {
        gameState.inventory.greenSeeds--;
    } else if (seedType === 'gold' && gameState.inventory.goldSeeds > 0) {
        gameState.inventory.goldSeeds--;
    } else {
        return;
    }

    const plant = {
        type: seedType,
        startTime: Date.now(),
        growthTime: 3000, // 3 —Å–µ–∫—É–Ω–¥—ã –¥–ª—è MVP
        isReady: false
    };

    gameState.plants[slotIndex] = plant;

    // –¢–∞–π–º–µ—Ä —Ä–æ—Å—Ç–∞
    setTimeout(() => {
        plant.isReady = true;
        showNotification(`–†–∞—Å—Ç–µ–Ω–∏–µ #${slotIndex + 1} –≤—ã—Ä–æ—Å–ª–æ!`);
        saveGameState();
        renderGame();
    }, plant.growthTime);

    saveGameState();
    renderGame();
}

// –°–æ–±—Ä–∞—Ç—å —Ä–∞—Å—Ç–µ–Ω–∏–µ
function harvestPlant(slotIndex) {
    const plant = gameState.plants[slotIndex];
    if (!plant || !plant.isReady) return;

    // –õ–æ–≥–∏–∫–∞ —Å–±–æ—Ä–∞ —É—Ä–æ–∂–∞—è
    if (plant.type === 'green') {
        // –ó–µ–ª–µ–Ω–æ–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ: 1-3 —Å–µ–º—è–Ω –∏ 0-1 –ø–ª–æ–¥–æ–≤ —Å 90% —à–∞–Ω—Å–æ–º
        if (Math.random() < 0.9) {
            const seeds = Math.floor(Math.random() * 3) + 1;
            const fruits = Math.random() > 0.5 ? 1 : 0;

            gameState.inventory.greenSeeds += seeds;
            gameState.inventory.greenFruits += fruits;
        }
        // –ú—É—Ç–∞—Ü–∏—è: 10% —à–∞–Ω—Å –ø–æ–ª—É—á–∏—Ç—å –∑–æ–ª–æ—Ç–æ–µ —Å–µ–º—è
        if (Math.random() < 0.1) {
            gameState.inventory.goldSeeds += 1;
        }
    }
    // –ó–æ–ª–æ—Ç–æ–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ: 70% —à–∞–Ω—Å –ø–æ–ª—É—á–∏—Ç—å 1 –ø–ª–æ–¥
    else if (plant.type === 'gold') {
        gameState.inventory.greenSeeds += 1;
        if (Math.random() < 0.7) {
            gameState.inventory.goldFruits += 1;
        }
    }

    delete gameState.plants[slotIndex];
    saveGameState();
    renderGame();
}

// –£–¥–∞–ª–∏—Ç—å —Ä–∞—Å—Ç–µ–Ω–∏–µ
function removePlant(slotIndex) {
    delete gameState.plants[slotIndex];
    saveGameState();
    renderGame();
}

// –°–æ–±—Ä–∞—Ç—å –≤—Å–µ —Ä–∞—Å—Ç–µ–Ω–∏—è
function harvestAll() {
    for (let i = 0; i < gameState.plantingSlots; i++) {
        if (gameState.plants[i]?.isReady) {
            harvestPlant(i);
        }
    }
}

// –£–¥–∞–ª–∏—Ç—å –≤—Å–µ —Ä–∞—Å—Ç–µ–Ω–∏—è
function removeAll() {
    for (let i = 0; i < gameState.plantingSlots; i++) {
        if (gameState.plants[i]) {
            delete gameState.plants[i];
        }
    }
    saveGameState();
    renderGame();
}

// –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–ª–æ–¥
function useFruit(fruitType) {
    if (fruitType === 'green' && gameState.inventory.greenFruits > 0) {
        gameState.inventory.greenFruits--;
        gameState.inventory.greenSeeds += 5;
        showNotification('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –∑–µ–ª–µ–Ω—ã–π –ø–ª–æ–¥! –ü–æ–ª—É—á–µ–Ω–æ 5 —Å–µ–º—è–Ω');
    }
    else if (fruitType === 'gold' && gameState.inventory.goldFruits > 0) {
        gameState.inventory.goldFruits--;
        const earnings = Math.floor(Math.random() * 5) + 1; // 1-5 TON
        gameState.balance += earnings;
        showNotification(`–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –∑–æ–ª–æ—Ç–æ–π –ø–ª–æ–¥! –ü–æ–ª—É—á–µ–Ω–æ ${earnings} TON`);
    }

    saveGameState();
    renderGame();
}

// –ö—É–ø–∏—Ç—å –Ω–æ–≤—ã–π —Å–ª–æ—Ç (–ò–°–ü–†–ê–í–õ–ï–ù–û)
function buySlot() {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞
    if (!gameState.walletConnected) {
        showNotification('–°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ –∫–æ—à–µ–ª–µ–∫!', true);
        return;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞
    if (gameState.balance < gameState.slotPrice) {
        showNotification(`–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ TON! –ù—É–∂–Ω–æ ${gameState.slotPrice} TON`, true);
        return;
    }

    // –°–ø–∏—Å–∞–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤
    gameState.balance -= gameState.slotPrice;

    // –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–ª–æ—Ç–æ–≤
    gameState.plantingSlots++;

    // –ü–æ–≤—ã—à–µ–Ω–∏–µ —Ü–µ–Ω—ã –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–∫—É–ø–∫–∏
    gameState.slotPrice = Math.floor(gameState.slotPrice * 1.5);

    showNotification(`–ö—É–ø–ª–µ–Ω –Ω–æ–≤—ã–π —Å–ª–æ—Ç! –¢–µ–ø–µ—Ä—å —É –≤–∞—Å ${gameState.plantingSlots} —Å–ª–æ—Ç–æ–≤`);
    saveGameState();
    renderGame();
}

// –°–±—Ä–æ—Å–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å
function resetProgress() {
    if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å –≤–µ—Å—å –ø—Ä–æ–≥—Ä–µ—Å—Å? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.')) {
        // –°–±—Ä–æ—Å –∫ –Ω–∞—á–∞–ª—å–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏—è–º
        gameState = {
            walletConnected: false,
            balance: 0,
            plantingSlots: 5,
            slotPrice: 10,
            plants: [],
            inventory: {
                greenSeeds: 0,
                goldSeeds: 0,
                greenFruits: 0,
                goldFruits: 0
            }
        };

        // –û—á–∏—Å—Ç–∫–∞ localStorage
        localStorage.removeItem('farmGameState');

        // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        renderGame();

        showNotification('–ü—Ä–æ–≥—Ä–µ—Å—Å —Å–±—Ä–æ—à–µ–Ω! –ò–≥—Ä–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –¥–æ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è');
    }
}

// –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∏–≥—Ä—ã
function renderGame() {
    renderWallet();
    renderFarm();
    renderInventory();
}

// –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∫–æ—à–µ–ª—å–∫–∞
function renderWallet() {
    const connectBtn = document.getElementById('connectWallet');
    const balanceEl = document.getElementById('balance');
    const resetBtn = document.getElementById('resetProgress');

    if (gameState.walletConnected) {
        connectBtn.textContent = '–ö–æ—à–µ–ª–µ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω';
        connectBtn.disabled = true;
    } else {
        connectBtn.textContent = 'Connect Wallet';
        connectBtn.disabled = false;
    }

    balanceEl.textContent = gameState.balance;
    resetBtn.style.display = gameState.walletConnected ? 'block' : 'none';
}

// –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Ñ–µ—Ä–º—ã
function renderFarm() {
    const slotsContainer = document.getElementById('plantingSlots');
    slotsContainer.innerHTML = '';

    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ª–æ—Ç–∞—Ö
    document.getElementById('slotCount').textContent = gameState.plantingSlots;
    const buySlotBtn = document.getElementById('buySlot');
    buySlotBtn.textContent = `–ö—É–ø–∏—Ç—å —Å–ª–æ—Ç (${gameState.slotPrice} TON)`;

    // –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∫–Ω–æ–ø–∫–∏ –ø–æ–∫—É–ø–∫–∏, –µ—Å–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤
    buySlotBtn.disabled = !gameState.walletConnected || gameState.balance < gameState.slotPrice;

    for (let i = 0; i < gameState.plantingSlots; i++) {
        const plant = gameState.plants[i];
        const slot = document.createElement('div');
        slot.className = `slot ${plant ? '' : 'empty'}`;

        if (plant) {
            const plantDiv = document.createElement('div');
            plantDiv.className = `plant ${plant.type}`;

            const icon = document.createElement('div');
            icon.className = 'plant-icon';
            icon.textContent = plant.type === 'green' ? 'üåø' : 'üåü';

            const typeText = document.createElement('div');
            typeText.textContent = plant.type === 'green' ? '–ó–µ–ª–µ–Ω–æ–µ' : '–ó–æ–ª–æ—Ç–æ–µ';

            const timer = document.createElement('div');
            timer.className = 'plant-timer';
            timer.textContent = plant.isReady ? '–ì–æ—Ç–æ–≤–æ!' : '–†–∞—Å—Ç–µ—Ç...';

            plantDiv.appendChild(icon);
            plantDiv.appendChild(typeText);
            plantDiv.appendChild(timer);

            const actions = document.createElement('div');
            actions.className = 'slot-actions';

            if (plant.isReady) {
                const harvestBtn = document.createElement('button');
                harvestBtn.className = 'slot-btn harvest-btn';
                harvestBtn.textContent = '–°–æ–±—Ä–∞—Ç—å';
                harvestBtn.onclick = () => harvestPlant(i);
                actions.appendChild(harvestBtn);
            }

            const removeBtn = document.createElement('button');
            removeBtn.className = 'slot-btn remove-btn';
            removeBtn.textContent = '–£–¥–∞–ª–∏—Ç—å';
            removeBtn.onclick = () => removePlant(i);
            actions.appendChild(removeBtn);

            slot.appendChild(plantDiv);
            slot.appendChild(actions);
        }

        slotsContainer.appendChild(slot);
    }
}

// –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
function renderInventory() {
    const inventory = document.getElementById('inventoryItems');
    inventory.innerHTML = '';

    // –ó–µ–ª–µ–Ω—ã–µ —Å–µ–º–µ–Ω–∞
    inventory.appendChild(createInventoryItem(
        'greenSeeds',
        'üå±',
        '–ó–µ–ª–µ–Ω–æ–µ —Å–µ–º—è',
        gameState.inventory.greenSeeds,
        () => selectSeed('green')
    ));

    // –ó–æ–ª–æ—Ç—ã–µ —Å–µ–º–µ–Ω–∞
    inventory.appendChild(createInventoryItem(
        'goldSeeds',
        'üíé',
        '–ó–æ–ª–æ—Ç–æ–µ —Å–µ–º—è',
        gameState.inventory.goldSeeds,
        () => selectSeed('gold')
    ));

    // –ó–µ–ª–µ–Ω—ã–µ –ø–ª–æ–¥—ã
    inventory.appendChild(createInventoryItem(
        'greenFruits',
        'üçè',
        '–ó–µ–ª–µ–Ω—ã–π –ø–ª–æ–¥',
        gameState.inventory.greenFruits,
        () => useFruit('green')
    ));

    // –ó–æ–ª–æ—Ç—ã–µ –ø–ª–æ–¥—ã
    inventory.appendChild(createInventoryItem(
        'goldFruits',
        'üçä',
        '–ó–æ–ª–æ—Ç–æ–π –ø–ª–æ–¥',
        gameState.inventory.goldFruits,
        () => useFruit('gold')
    ));
}

// –°–æ–∑–¥–∞—Ç—å —ç–ª–µ–º–µ–Ω—Ç –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
function createInventoryItem(id, icon, name, count, onClick) {
    const item = document.createElement('div');
    item.className = `inventory-item ${id.includes('green') ? 'green' : 'gold'}`;
    item.onclick = onClick;

    const iconEl = document.createElement('div');
    iconEl.className = 'item-icon';
    iconEl.textContent = icon;

    const nameEl = document.createElement('div');
    nameEl.className = 'item-name';
    nameEl.textContent = name;

    const countEl = document.createElement('div');
    countEl.className = 'item-count';
    countEl.textContent = count;

    item.appendChild(iconEl);
    item.appendChild(nameEl);
    item.appendChild(countEl);

    return item;
}

// –í—ã–±–æ—Ä —Å–µ–º–µ–Ω–∏ –¥–ª—è –ø–æ—Å–∞–¥–∫–∏
function selectSeed(seedType) {
    if (!gameState.walletConnected) {
        showNotification('–°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ –∫–æ—à–µ–ª–µ–∫!', true);
        return;
    }

    const emptySlots = [];
    for (let i = 0; i < gameState.plantingSlots; i++) {
        if (!gameState.plants[i]) {
            emptySlots.push(i);
        }
    }

    if (emptySlots.length === 0) {
        showNotification('–ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤!', true);
        return;
    }

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π —Å–≤–æ–±–æ–¥–Ω—ã–π —Å–ª–æ—Ç
    plantSeed(emptySlots[0], seedType);
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
function setupEventListeners() {
    document.getElementById('connectWallet').addEventListener('click', connectWallet);
    document.getElementById('harvestAll').addEventListener('click', harvestAll);
    document.getElementById('removeAll').addEventListener('click', removeAll);
    document.getElementById('buySlot').addEventListener('click', buySlot);
    document.getElementById('resetProgress').addEventListener('click', resetProgress);
}

// –ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
window.addEventListener('DOMContentLoaded', initGame);